#!/bin/bash

. $(type -P utility.sh)

Filter() {
    local illegible='"$&'\''(),./019:;IOQS[\]`gjlo{|}'
    local input="$2"
    if [[ "$1" =~ 'a' ]]; then
        input=$(<<<"${input}" tr -d "${illegible}")
    fi
    if [[ "$1" =~ 'd' ]]; then
        input=$(<<<"${input}" grep -o '.' | sort -u | tr -d '\n')
    fi
    if ((${#2} == ${#input})); then
        echo "$2"
    fi
}
Listup() {
    while true; do
        candidates=$(pwgen "$1" "$2" | tr ' ' '\n' |
                         parallel Filter "${3@Q}" 2>/dev/null)
        if test "${candidates}"; then
            echo "${candidates}"
            return
        fi
    done
}
Usage() {
    cat <<EOF
Usage: $(basename "$0") [OPTIONS] [length]

Options:
  -a  Avoid ambiguity
  -d  Avoid duplication
  -h  Print this usage
  -s  Accept symbols
  -x  Abbrev of -ads
EOF
    exit
}

Command executable pwgen pwscore
declare -i len=32
opts='-sC'
filteropts=''
while Bound 1 $#; do
    case "$1" in
        -??* )
            set -- '' "${1:0:2}" "-${1:2}" "${@:2}";;
        -a* )
            filteropts+='a';;
        -d* )
            filteropts+='d';;
        -h* )
            Usage;;
        -s* )
            opts='-syncC';;
        -x* )
            set -- '' -ads "${@:2}";;
        -?* )
            Error "'${1:0:2}' is unknown option";;
        * )
            Command is-integer "$1"
            len=$1
            if ((len < 8)); then
                Error 'too short for password'
            fi;;
    esac
    shift
done
declare -a candidates
for password in $(pwgen "${opts}" ${len}); do
    if Bound ambiguous && Ambiguous "${password}"; then
        continue
    fi
    if Bound duplicate && Duplicate "${password}"; then
        continue
    fi
    candidates+=("${password}")
done
declare -i score=0 maxscore=0
for password in "${candidates[@]}"; do
    score=$(<<<"${password}" pwscore 2>/dev/null)
    if ((maxscore < score)); then
        strongest="${password}"
        maxscore=${score}
    fi
done
if Bound strongest; then
    echo -n "${strongest}" | tee >(Command clip &>/dev/null)
    echo '' ${maxscore} >&2
fi
