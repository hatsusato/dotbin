#!/bin/bash

. $(type -P utility.sh)

Ambiguous() {
    legible=$(<<<"$1" tr -cd '[:alnum:]!#%*+<=>?@^_~-')
    [[ "${legible}" != "$1" ]] || [[ "$1" =~ [019CIKOSUVWXZgjlo] ]]
}
Duplicate() {
    sorted=$(<<<"$1" grep -o '.' | sort | tr -d '\n')
    unique=$(<<<"$1" grep -o '.' | sort -u | tr -d '\n')
    [[ "${sorted}" != "${unique}" ]]
}
Usage() {
    cat <<EOF
Usage: $(basename "$0") [OPTIONS] [length]

Options:
  -a  Avoid ambiguity
  -d  Check duplication
  -h  Print this usage
  -s  Include symbols
EOF
    exit
}

Command executable pwgen pwscore
declare -i len=32
opts='-sC'
while Bound 1 $#; do
    case "$1" in
        -??* )
            set -- "$1" "${1:0:2}" "-${1:2}" "${@:2}";;
        -a* )
            ambiguous='';;
        -d* )
            duplicate='';;
        -h* )
            Usage;;
        -s* )
            opts='-syncC';;
        -?* )
            Error "'${1:0:2}' is unknown option";;
        * )
            Command is-integer "$1"
            len=$1
            if ((len < 8)); then
                Error 'too short for password'
            fi;;
    esac
    shift
done
declare -i score=0 maxscore=0
for password in $(pwgen "${opts}" ${len}); do
    if Bound ambiguous && Ambiguous "${password}"; then
        continue
    fi
    if Bound duplicate && Duplicate "${password}"; then
        continue
    fi
    score=$(<<<"${password}" pwscore 2>/dev/null)
    if ((maxscore < score)); then
        strongest="${password}"
        maxscore=${score}
    fi
done
if Bound strongest; then
    <<<"${strongest}" Command clip &>/dev/null
    echo "${strongest}"
    echo ${maxscore} >&2
fi
