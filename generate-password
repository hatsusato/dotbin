#!/bin/bash

. $(type -P utility.sh)

Filter() {
    local -r illegible='"$&'\''(),./019:;IOQS[\]`gjlo{|}'
    local input="$2"
    if [[ "$1" =~ 'a' ]]; then
        input=$(<<<"${input}" tr -d "${illegible}")
    fi
    if [[ "$1" =~ 'd' ]]; then
        input=$(<<<"${input}" grep -o '.' | sort -u | tr -d '\n')
    fi
    if ((${#2} == ${#input})); then
        echo "$2"
    fi
}
Listup() {
    pwgen "$1" "$2" | tr ' ' '\n' | parallel Filter "${3@Q}" 2>/dev/null
}
Usage() {
    cat <<EOF
Usage: $(basename "$0") [OPTIONS] [length]

Options:
  -a  Avoid ambiguity
  -d  Avoid duplication
  -h  Print this usage
  -s  Accept symbols
  -t [n]
      Extend time limit
  -x  Abbrev of -ads
EOF
    exit
}

Command executable parallel pwgen pwscore
declare -i len=32
declare -i limit=1
declare -g parsed_
opts='-sC'
filteropts=''
while Bound 1 $#; do
    case "$1" in
        -[adhsx]?* )
            set -- "${1:0:2}" "-${1:2}" "${@:2}";;
        -a )
            filteropts+='a'
            shift;;
        -d )
            filteropts+='d'
            shift;;
        -h )
            Usage;;
        -s )
            opts='-syncC'
            shift;;
        -t* )
            Parse "$@" || shift $?
            Command is-integer "${parsed_}"
            limit="${parsed_}";;
        -x )
            set -- -ads "${@:2}";;
        -* )
            Error "'${1:0:2}' is unknown option";;
        * )
            Command is-integer "$1"
            len=$1
            if ((len < 8)); then
                Error 'too short for password'
            fi
            shift;;
    esac
done
declare -a args=("${limit}s" Listup "${opts}" "${len}" "${filteropts}")
declare -i err=0
export -f Filter Listup
result=$(Command timeout-repeat "${args[@]}") || err=$?
if ((err == 124)); then
    Error 'time limit exceeded'
fi
IFS=$'\n' declare -a candidates=(${result})
declare -i score=0 maxscore=0
for password in "${candidates[@]}"; do
    if score=$(<<<"${password}" pwscore 2>/dev/null); then
        if ((maxscore < score)); then
            strongest="${password}"
            maxscore=${score}
        fi
    fi
done
echo -n "${strongest}" | tee >(Command clip &>/dev/null)
echo '' ${maxscore} >&2
