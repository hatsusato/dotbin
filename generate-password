#!/bin/bash

. $(type -P utility.sh)

Ambiguous() {
    local illegible='"$&'\''(),./019:;IOQS[\]`gjlo{|}'
    local remain=$(<<<"$1" tr -cd "${illegible}")
    test "${remain}"
}
Duplicate() {
    local -i count=${#1}
    local -i unique=$(<<<"$1" grep -o '.' | sort -u | wc -l)
    ((unique < count))
}
Usage() {
    cat <<EOF
Usage: $(basename "$0") [OPTIONS] [length]

Options:
  -a  Avoid ambiguity
  -d  Avoid duplication
  -h  Print this usage
  -s  Accept symbols
  -x  Abbrev of -ads
EOF
    exit
}

Command executable pwgen pwscore
declare -i len=32
opts='-sC'
while Bound 1 $#; do
    case "$1" in
        -??* )
            set -- '' "${1:0:2}" "-${1:2}" "${@:2}";;
        -a* )
            ambiguous='';;
        -d* )
            duplicate='';;
        -h* )
            Usage;;
        -s* )
            opts='-syncC';;
        -x* )
            set -- '' -ads "${@:2}";;
        -?* )
            Error "'${1:0:2}' is unknown option";;
        * )
            Command is-integer "$1"
            len=$1
            if ((len < 8)); then
                Error 'too short for password'
            fi;;
    esac
    shift
done
declare -a candidates
for password in $(pwgen "${opts}" ${len}); do
    if Bound ambiguous && Ambiguous "${password}"; then
        continue
    fi
    if Bound duplicate && Duplicate "${password}"; then
        continue
    fi
    candidates+=("${password}")
done
declare -i score=0 maxscore=0
for password in "${candidates[@]}"; do
    score=$(<<<"${password}" pwscore 2>/dev/null)
    if ((maxscore < score)); then
        strongest="${password}"
        maxscore=${score}
    fi
done
if Bound strongest; then
    echo -n "${strongest}" | tee >(Command clip &>/dev/null)
    echo '' ${maxscore} >&2
fi
